# 原则

0. 很多初学者不了解，一个高明的程序员如果开始用一种新的程序语言，他往往不是去看这个语言的大部头手册或者书籍，
而是先有一个需要解决的问题。手头有了问题，他可以用两分钟浏览一下这语言的手册，看看这语言大概长什么样。
然后，他直接拿起一段例子代码来开始修改捣鼓，想法把这代码改成自己正想解决的问题。
在这个简短的过程中，他很快的掌握了这个语言，并用它表达出心里的想法。
在这个过程中，随着需求的出现，他可能会问这样的问题：
0.1. 这个语言的“变量定义”是什么语法，需要“声明类型”吗，还是可以用“类型推导”？
0.2. 它的“类型”是什么语法？是否支持“泛型”？泛型的 “variance” 如何表达？
0.3. 这个语言的“函数”是什么语法，“函数调用”是什么语法，可否使用“缺省参数”？……

所以，他是带着问题找特性，就像查字典一样，而不是被淹没于大部头的手册里面，昏昏欲睡一个月才开始写代码。

1. One can only Understand things he built!

2. 有个大师说得好，完全理解一种语言最好的方法就是自己动手实现它，也就是自己写一个解释器来实现它的语义。
但我觉得这句话应该稍微修改一下：完全理解一种“语言特性”最好的方法就是自己亲自实现它。

3. 举个例子，学习 SICP 的时候，大家都会亲自用 Scheme 实现一个面向对象系统。用 Scheme 实现的面向对象系统，
跟 Java，C++，Python 之类的语言语法相去甚远，然而它却能帮助你理解任何这些 OOP 语言里面的“面向对象”这一概念，
它甚至能帮助你理解各种面向对象实现的差异。
这种效果是你直接学习 OOP 语言得不到的，因为在学习 Java，C++，Python 之类语言的时候，你只是一个用户，而用 
Scheme 自己动手实现了 OO 系统之后，你成为了一个创造者。

4. 自己动手实现语言特性
在基本学会了各种语言特性，能用它们来写代码之后，下一步的进阶就是去实现它们。只有实现了各种语言特性，
你才能完全地拥有它们，成为它们的主人。否则你就只是它们的使用者，你会被语言的设计者牵着鼻子走。

5. 掌握关键语言特性，忽略次要特性

6. 


