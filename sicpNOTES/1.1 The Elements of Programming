primitive expressions, which represent the simplest entities the language is concerned with,
means of combination, by which compound elements are built from simpler ones, and
means of abstraction, by which compound elements can be named and manipulated as units.

1.1.2  Naming and the Environment
A critical aspect of a programming language is the means it provides for using names to refer to 
computational objects. We say that the name identifies a variable whose value is the object.

(define pi 3.14159)
(define radius 10)
(* pi (* radius radius))
314.159
(define circumference (* 2 pi radius))
circumference
62.8318

(define (f x) (* x x))
(define f (lambda (x) (* x x)))

Define is our language's simplest means of abstraction, for it allows us to use simple names 
to refer to the results of compound operations.
In general, computational objects(内存对象，可计算对象) may have very complex structures, and it would be extremely 
inconvenient to have to remember and repeat their details each time we want to use them. Indeed, 
complex programs are constructed by building, step by step, computational objects of increasing 
complexity.

It should be clear that the possibility of associating values with symbols and later retrieving 
them means that the interpreter must maintain some sort of memory that keeps track of the name-object pairs. 
This memory is called the environment (more precisely the global environment, since we will see later that 
a computation may involve a number of different environments).

1.1.3  Evaluating Combinations
Next, observe that the repeated application of the first step brings us to the point where we need to evaluate, 
not combinations, but primitive expressions such as numerals, built-in operators, or other names. 
We take care of the primitive cases by stipulating that

the values of numerals are the numbers that they name,
the values of built-in operators are the machine instruction sequences that carry out the corresponding operations, and
the values of other names are the objects associated with those names in the environment.

We may regard the second rule as a special case of the third one by stipulating that symbols 
such as + and * are also included in the global environment, and are associated with the sequences 
of machine instructions that are their ``values.'' The key point to notice is the role of the 
environment in determining the meaning of the symbols in expressions.

As we shall see in chapter 3, the general notion of the environment as providing a context in which 
evaluation takes place will play an important role in our understanding of program execution.

Notice that the evaluation rule given above does not handle definitions. For instance, evaluating (define x 3) 
does not apply define to two arguments, one of which is the value of the symbol x and the other of which is 3, 
since the purpose of the define is precisely to associate x with a value. (That is, (define x 3) is not a combination.)

Such exceptions to the general evaluation rule are called special forms. Define is the only example of a 
special form that we have seen so far, but we will meet others shortly. Each special form has its own 
evaluation rule. The various kinds of expressions (each with its associated evaluation rule) constitute 
the syntax of the programming language. In comparison with most other programming languages, 
Lisp has a very simple syntax; that is, the evaluation rule for expressions can be described by a simple 
general rule together with specialized rules for a small number of special forms.

1.1.4  Compound Procedures
We have identified in Lisp some of the elements that must appear in any powerful programming language:

# Numbers and arithmetic operations are primitive data and procedures.
# Nesting of combinations provides a means of combining operations.
# Definitions that associate names with values provide a limited means of abstraction.

Now we will learn about procedure definitions, a much more powerful abstraction technique by which 
a compound operation can be given a name and then referred to as a unit.

1.1.5  The Substitution Model for Procedure Application

The process we have just described is called the substitution model for procedure application. 
It can be taken as a model that determines the ``meaning'' of procedure application, insofar as 
the procedures in this chapter are concerned. However, there are two points that should be stressed:

**The purpose of the substitution is to help us think about procedure application, not to provide 
a description of how the interpreter really works. Typical interpreters do not evaluate procedure 
applications by manipulating the text of a procedure to substitute values for the formal parameters. 
In practice, the ``substitution'' is accomplished by using a local environment for the formal parameters. 
We will discuss this more fully in chapters 3 and 4 when we examine the implementation of an interpreter in detail.

**Over the course of this book, we will present a sequence of increasingly elaborate models of how 
interpreters work, culminating with a complete implementation of an interpreter and compiler in chapter 5. 
The substitution model is only the first of these models -- a way to get started thinking formally about 
the evaluation process. In general, when modeling phenomena in science and engineering, we begin with 
simplified, incomplete models. As we examine things in greater detail, these simple models become inadequate 
and must be replaced by more refined models. The substitution model is no exception. In particular, when we 
address in chapter 3 the use of procedures with ``mutable data,'' we will see that the substitution model 
breaks down and must be replaced by a more complicated model of procedure application.

Applicative order versus normal order
According to the description of evaluation given in section 1.1.3, the interpreter first evaluates 
the operator and operands and then applies the resulting procedure to the resulting arguments. 
This is not the only way to perform evaluation. An alternative evaluation model would not evaluate 
the operands until their values were needed. Instead it would first substitute operand expressions 
for parameters until it obtained an expression involving only primitive operators, and would then 
perform the evaluation.
This alternative "fully expand and then reduce" evaluation method is known as normal-order evaluation.

1.1.6  Conditional Expressions and Predicates
The expressive power of the class of procedures that we can define at this point is very limited, 
because we have no way to make tests and to perform different operations depending on the result of a test.

1.1.7  Example: Square Roots by Newton's Method
But there is an important difference between mathematical functions and computer procedures. 
Procedures must be effective.
程序必须是指令化的，有着明确的操作。数学函数可以是定义式的。

1.1.8  Procedures as Black-Box Abstractions
For example, when we define the good-enough? procedure in terms of square, we are able to regard the 
square procedure as a "black box." We are not at that moment concerned with how the procedure computes 
its result, only with the fact that it computes the square. The details of how the square is computed 
can be suppressed, to be considered at a later time.

So a procedure definition should be able to suppress detail. The users of the procedure may not have 
written the procedure themselves, but may have obtained it from another programmer as a black box. 
A user should not need to know how the procedure is implemented in order to use it.


Local names
The simplest consequence is that the parameter names of a procedure must be local to the body of the procedure.

If a variable is not bound, we say that it is free. The set of expressions for which a binding defines a name 
is called the scope of that name.

In a procedure definition, the bound variables declared as the formal parameters of the procedure have the 
body of the procedure as their scope.
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

In the definition of good-enough? above, guess and x are bound variables but <, -, abs, and square are free.


Internal definitions and block structure
We have one kind of name isolation available to us so far: The formal parameters of a procedure are 
local to the body of the procedure.

(define (sqrt x)
  (define (good-enough? guess x)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
  (sqrt-iter 1.0 x))

Such nesting of definitions, called block structure, is basically the right solution to the simplest 
name-packaging problem.

But there is a better idea lurking here. In addition to internalizing the definitions of the auxiliary 
procedures, we can simplify them. Since x is bound in the definition of sqrt, the procedures good-enough?, 
improve, and sqrt-iter, which are defined internally to sqrt, are in the scope of x. Thus, it is not 
necessary to pass x explicitly to each of these procedures. Instead, we allow x to be a free variable 
in the internal definitions, as shown below. Then x gets its value from the argument with which the 
enclosing procedure sqrt is called. This discipline is called lexical scoping.
(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  (define (sqrt-iter guess)
    (if (good-enough? guess)
        guess
        (sqrt-iter (improve guess))))
  (sqrt-iter 1.0))

The idea of block structure originated with the programming language Algol 60. It appears in most advanced 
programming languages and is an important tool for helping to organize the construction of large programs.




